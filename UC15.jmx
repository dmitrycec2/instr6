<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="---------------------------------------------------------" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="set_sys_props_testData - temporary" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="temp_script_num" elementType="Argument">
            <stringProp name="Argument.name">temp_script_num</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="temp_targetConcurrency" elementType="Argument">
            <stringProp name="Argument.name">temp_targetConcurrency</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.desc">sec - 4 hours</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="temp_holdLoad" elementType="Argument">
            <stringProp name="Argument.name">temp_holdLoad</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.desc">sec - 30 min</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="temp_stepTime" elementType="Argument">
            <stringProp name="Argument.name">temp_stepTime</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.desc">sec - 10 min</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="temp_rampUpTime" elementType="Argument">
            <stringProp name="Argument.name">temp_rampUpTime</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="temp_stepSize" elementType="Argument">
            <stringProp name="Argument.name">temp_stepSize</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="temp_pacingTargetThroughput" elementType="Argument">
            <stringProp name="Argument.name">temp_pacingTargetThroughput</stringProp>
            <stringProp name="Argument.value">0.5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="get_sys_props_testData" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="script_num" elementType="Argument">
            <stringProp name="Argument.name">script_num</stringProp>
            <stringProp name="Argument.value">${__property(script_num, script_num, ${temp_script_num})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetConcurrency" elementType="Argument">
            <stringProp name="Argument.name">targetConcurrency</stringProp>
            <stringProp name="Argument.value">${__property(targetConcurrency, targetConcurrency, ${temp_targetConcurrency})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="holdLoad" elementType="Argument">
            <stringProp name="Argument.name">holdLoad</stringProp>
            <stringProp name="Argument.value">${__property(holdLoad, holdLoad, ${temp_holdLoad})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stepTime" elementType="Argument">
            <stringProp name="Argument.name">stepTime</stringProp>
            <stringProp name="Argument.value">${__property(stepTime, stepTime, ${temp_stepTime})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUpTime" elementType="Argument">
            <stringProp name="Argument.name">rampUpTime</stringProp>
            <stringProp name="Argument.value">${__property(rampUpTime, rampUpTime, ${temp_rampUpTime})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="stepSize" elementType="Argument">
            <stringProp name="Argument.name">stepSize</stringProp>
            <stringProp name="Argument.value">${__property(stepSize, stepSize, ${temp_stepSize})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pacingTargetThroughput" elementType="Argument">
            <stringProp name="Argument.name">pacingTargetThroughput</stringProp>
            <stringProp name="Argument.value">${__property(pacingTargetThroughput, pacingTargetThroughput, ${temp_pacingTargetThroughput})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="---------------------------------------------------------" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </Arguments>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="network config" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="filename">../config/networkconfig.csv</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames">host,protocol,port</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="---------------------------------------------------------" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port">${port}</stringProp>
        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="---------------------------------------------------------" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="UC15_MAX" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">${targetConcurrency}</stringProp>
        <stringProp name="Threads initial delay">0</stringProp>
        <stringProp name="Start users count">${stepSize}</stringProp>
        <stringProp name="Start users count burst">0</stringProp>
        <stringProp name="Start users period">${stepTime}</stringProp>
        <stringProp name="Stop users count">5</stringProp>
        <stringProp name="Stop users period">1</stringProp>
        <stringProp name="flighttime">${holdLoad}</stringProp>
        <stringProp name="rampUp">${rampUpTime}</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">postgresqlpool</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://msk-esotstsrv03;DatabaseName=OperationsStorage</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">cadasuser</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">cadasuser</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="connectionProperties"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV login" enabled="true">
          <stringProp name="delimiter">\t</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">./UC15/login.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">login</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="pacing_15" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control - pacing" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
              <intProp name="calcMode">0</intProp>
              <stringProp name="throughput">${pacingTargetThroughput}</stringProp>
            </ConstantThroughputTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="UC15-MAIN" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="UC15-01_ArrayPage" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UC15-Request 1" enabled="true">
              <stringProp name="dataSource">postgresqlpool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT [o].[OfficeGUID], [o].[DefaultOrder], [o].[LegacyID], [o].[Level], [o].[Name], [o].[OfficialEngName], [o].[OfficialRusName], [o].[ParentGUID], [o].[PartnerGUID], [o].[ShortName]
FROM (
    SELECT distinct Reference.Offices.* FROM Reference.Offices INNER JOIN PolishedSales.CurrentPolishedStock ON Reference.Offices.OfficeGUID = CurrentPolishedStock.TargetOfficeGUID
) AS [o]
ORDER BY [o].[DefaultOrder]</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">result1</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="OfficeGUID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String new_string = vars.get(&quot;result1&quot;)
def matches = (new_string =~ /OfficeGUID=(.+?),/)
//log.info(&quot;new_string____________&quot; +  matches[3][1])
//log.info(&quot;INFO____________&quot; +  matches.getCount())
def s = &quot;&quot;;
for (int i = 0;i&lt;matches.getCount();i++){
	s= s+&quot;&apos;&quot;+ matches[i][1]+&quot;&apos;&quot;;
	}
s=s.replaceAll(&quot;&apos;&apos;&quot;,&quot;&apos;, &apos;&quot;)	
vars.put(&quot;OfficeGUID&quot;,s);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UC15-Request 2" enabled="true">
              <stringProp name="dataSource">postgresqlpool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">SELECT [a].[ArrayID], [a].[ArrayName], [a].[CloseDate], [a].[CostByFact], [a].[CostByRFCoeff], [a].[CreatorLoginName], [a].[CurrentCost], [a].[IsChanged], [a].[MarketType], [a].[ModificatorLoginName], [a].[Name], [a].[OfficeGUID], [a].[OpenDate], [a].[QtyPackets], [a].[QuantityOfStones], [a].[RoughDiamondCost], [a].[RoughDiamondWeight], [a].[ShortName], [a].[State], [a].[UPPCost], [a].[UPPCostInner], [a].[UPPCostMin], [a].[UppPercent], [a].[WeightByFact]
FROM [PolishedSales].[ArrayView] AS [a]
WHERE (((CONVERT(date, [a].[CloseDate]) = CONVERT(date, GETDATE())) OR (CONVERT(date, [a].[CloseDate]) IS NULL AND CONVERT(date, GETDATE()) IS NULL)) OR ([a].[State] = CAST(0 AS smallint))) AND [a].[OfficeGUID] IN (${OfficeGUID})
ORDER BY [a].[ArrayID] DESC</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UC15-Request 3" enabled="true">
              <stringProp name="dataSource">postgresqlpool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">exec sp_executesql N&apos;SELECT TOP(2) [p].[PersonaGUID], [p].[Email], [p].[Initials], [p].[IsNewAccess], [p].[LastName], [p].[LoginName], [p].[State], [p].[TabNumber]
FROM [Security].[Personas] AS [p]
WHERE [p].[LoginName] = @__loginName_0&apos;,N&apos;@__loginName_0 nvarchar(40)&apos;,@__loginName_0=N&apos;${login}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable">result3</stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PersonaGUID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String new_string = vars.get(&quot;result3&quot;)
def matches = (new_string =~ /PersonaGUID=(.+?),/)
//log.info(&quot;personaGUID____________&quot; +  matches[0][1])
//log.info(&quot;&quot;personaGUID____________&quot; +  matches.getCount())
vars.put(&quot;PersonaGUID&quot;,matches[0][1]);</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UC15-Request 4" enabled="true">
              <stringProp name="dataSource">postgresqlpool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">exec sp_executesql N&apos;SELECT TOP(2) [e].[Id], [e].[Name]
FROM [dbo].[Elements] AS [e]
WHERE [e].[Name] = @__8__locals1_elementName_0&apos;,N&apos;@__8__locals1_elementName_0 nvarchar(256)&apos;,@__8__locals1_elementName_0=N&apos;ArrayView&apos;

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UC15-Request 5" enabled="true">
              <stringProp name="dataSource">postgresqlpool</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">exec sp_executesql N&apos;SELECT TOP(2) [u].[Id], [u].[ElementId], [u].[JsonText], [u].[PersonaGUID]
FROM [dbo].[UserPrefs] AS [u]
WHERE ([u].[ElementId] = @__elementId_0) AND ([u].[PersonaGUID] = @__8__locals1_personaGUID_1)&apos;,N&apos;@__elementId_0 int,@__8__locals1_personaGUID_1 uniqueidentifier&apos;,@__elementId_0=2,@__8__locals1_personaGUID_1=&apos;${PersonaGUID}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Count Records</stringProp>
              <stringProp name="resultSetMaxRows"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV group1" enabled="true">
                <stringProp name="delimiter">\t</stringProp>
                <stringProp name="fileEncoding">UTF-8</stringProp>
                <stringProp name="filename">./UC15/group1.csv</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.thread</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">query_string</stringProp>
              </CSVDataSet>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LoopVar" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">String guery_string = vars.get(&quot;query_string&quot;)

def matches = (guery_string =~ /(^[0-9]{1,2})(.*)/)
	vars.put(&quot;loop_count&quot;, matches[0][1])
	vars.put(&quot;query_string&quot;, matches[0][2].replaceAll(&quot;\\{login\\}&quot;, vars.get(&quot;login&quot;)));
//log.info(&quot;INFO____________&quot; +  matches[0][1])
//log.info(&quot;INFO____________&quot; +  matches[0][2])</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="UC15-group1" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${loop_count}</stringProp>
                </LoopController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UC15-Request_group1" enabled="true">
                    <stringProp name="dataSource">postgresqlpool</stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="query">${query_string}</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="variableNames"></stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="resultSetHandler">Count Records</stringProp>
                    <stringProp name="resultSetMaxRows"></stringProp>
                  </JDBCSampler>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
